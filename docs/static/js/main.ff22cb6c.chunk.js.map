{"version":3,"sources":["tetris/shapeFactory.js","tetris/useBoard.js","tetris/useInterval.js","tetris/board.js","index.js"],"names":["SHAPES","shape","x","y","width","height","rotate","randomShape","Math","floor","random","length","COLUMN_COUNT","mergeIntoStage","stage","position","res","forEach","point","value","slice","updateStage","useBoard","useState","Array","from","fill","scene","setScene","setShape","setPosition","display","setDisplay","score","setScore","movePosition","validPosition","every","tX","tY","useEffect","newDisplay","newScene","map","row","copyScene","touched","removeRow","rY","oldVal","rowHasEmptySpace","callback","delay","callbackRef","useRef","current","interval","setInterval","clearInterval","useInterval","event","key","preventDefault","newShape","rX","rotateShape","Board","onKeyDown","eBoard","focus","ref","className","tabIndex","toLocaleString","index","Row","memo","props","cell","Cell","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff22cb6c.chunk.js","sourcesContent":["\nconst SHAPES = [\n    {\n        shape: [\n            {x:0, y:0},\n            {x:0, y:1},\n            {x:1, y:0},\n            {x:1, y:1}\n        ],\n        width: 2,\n        height: 2,\n        rotate: false\n    },\n    {\n        shape: [\n            {x:0, y:0},\n            {x:0, y:1},\n            {x:0, y:2},\n            {x:0, y:3}\n        ],\n        width: 1,\n        height: 4\n    },\n    {\n        shape: [\n            {x:0, y:0},\n            {x:0, y:1},\n            {x:0, y:2},\n            {x:1, y:2}\n        ],\n        width: 1,\n        height: 3\n    }\n];\n\nexport function randomShape() {\n    return SHAPES[Math.floor(Math.random() * SHAPES.length)];\n}\n","import {useEffect, useState} from 'react';\nimport {useInterval} from \"./useInterval\";\nimport {randomShape} from \"./shapeFactory\";\n\nexport const ROW_COUNT = 20;\nexport const COLUMN_COUNT = 10;\n\nfunction copyScene(scene) {\n    return scene.map(row=>row.slice());\n}\n\nfunction mergeIntoStage(stage, shape, position) {\n    let res = stage;\n\n    shape.shape.forEach( point => {\n        const x = point.x + position.x;\n        const y = point.y + position.y;\n\n        if (x<0 || y<0 || x>=COLUMN_COUNT || y>=ROW_COUNT) { return; }\n\n        res = updateStage(res, x, y, 1);\n    });\n\n    return res;\n}\n\nfunction updateStage(stage, x, y, value) {\n    if (stage[y][x]===value) { return stage; }\n    const res = stage.slice();\n    res[y] = stage[y].slice();\n    res[y][x] = value;\n    return res;\n}\n\nfunction createEmptyScene() {\n    return Array.from(Array(ROW_COUNT), ()=> Array(COLUMN_COUNT).fill(0) );\n}\n\nexport function useBoard() {\n\n    const [scene, setScene] = useState(()=> createEmptyScene() );\n    const [shape, setShape] = useState(()=> randomShape() );\n    const [position, setPosition] = useState({x: 0, y: 0});\n    const [display, setDisplay] = useState( ()=> mergeIntoStage(scene, shape, position) );\n    const [score, setScore] = useState( 0);\n\n    useEffect(updateDisplay, [scene, shape, position]);\n    useEffect(removeFullLines, [scene]);\n    useInterval(tick, 600);\n\n    function updateDisplay() {\n        const newDisplay = mergeIntoStage(scene, shape, position);\n        setDisplay(newDisplay);\n    }\n\n    function tick() {\n        if (!movePosition(0, 1)) {\n            placeShape();\n        }\n    }\n\n    function placeShape() {\n        setScene(mergeIntoStage(scene, shape, position));\n        setShape(randomShape());\n        setPosition({x: 0, y: 0});\n    }\n\n    function rotateShape() {\n\n        const tX = Math.floor(shape.width / 2);\n        const tY = Math.floor(shape.height / 2);\n\n        const newPoints = shape.shape.map( point => {\n            let {x,y} = point;\n\n            x -= tX;\n            y -= tY;\n\n            // cos 90 = 0, sin 90 = 1\n            // x = x cos 90 - y sin 90 = -y\n            // y = x sin 90 + y cos 90 = x\n            let rX = -y;\n            let rY = x;\n\n            rX += tX;\n            rY += tY;\n\n            return {x: rX, y: rY};\n        });\n        const newShape = {\n            shape: newPoints,\n            width: shape.width,\n            height: shape.height\n        };\n\n        if (validPosition(position, newShape)) {\n            setShape(newShape);\n        }\n    }\n\n    function removeFullLines() {\n\n        const newScene = copyScene(scene);\n        let touched = false;\n\n        const removeRow = (rY) => {\n            for (let y = rY; y > 0; y--) {\n                for (let x = 0; x < COLUMN_COUNT - 1; x++) {\n                    newScene[y][x] = newScene[y-1][x];\n                }\n            }\n            // insert blank row at top\n            for (let x = 0; x < COLUMN_COUNT - 1; x++) {\n                newScene[0][x] = 0;\n            }\n\n            touched = true;\n            setScore( oldVal => oldVal + 1000 );\n        };\n\n        for (let y = 0; y < ROW_COUNT; y++) {\n            let rowHasEmptySpace = false;\n            for (let x = 0; x < COLUMN_COUNT - 1; x++) {\n                if (newScene[y][x]===0) {\n                    rowHasEmptySpace = true;\n                    break;\n                }\n            }\n            if (!rowHasEmptySpace) {\n                removeRow(y);\n            }\n        }\n\n        if (touched) {\n            setScene(newScene);\n        }\n    }\n\n    function onKeyDown(event) {\n        switch (event.key) {\n            case 'ArrowRight':\n                movePosition(1,0);\n                event.preventDefault();\n                break;\n            case 'ArrowLeft':\n                movePosition(-1,0);\n                event.preventDefault();\n                break;\n            case 'ArrowDown':\n                movePosition(0,1);\n                event.preventDefault();\n                break;\n            case 'ArrowUp':\n                rotateShape();\n                event.preventDefault();\n                break;\n            default:\n                break;\n        }\n    }\n\n    function movePosition(x, y) {\n        const res = {x: x + position.x, y: y + position.y};\n\n        if (!validPosition(res, shape)) { return false;}\n\n        setPosition(res);\n\n        return true;\n    }\n\n    function validPosition(position, shape) {\n        return shape.shape.every( point => {\n            const tX = point.x + position.x;\n            const tY = point.y + position.y;\n\n            if (tX < 0 || tX >= COLUMN_COUNT) { return false; }\n\n            if (tY < 0 || tY >= ROW_COUNT) { return false; }\n\n            if (scene[tY][tX]!==0) { return false; }\n\n            return true;\n        });\n    }\n\n    return [display, score, onKeyDown];\n}\n","import React, {useEffect, useRef} from 'react';\n\nexport function useInterval(callback, delay) {\n\n    const callbackRef = useRef();\n\n    useEffect( ()=> {\n        callbackRef.current = callback;\n    }, [callback]);\n\n    useEffect( ()=> {\n        const interval = setInterval(()=> callbackRef.current(), delay);\n        return ()=> clearInterval(interval);\n    }, [delay]);\n\n}","import React, { memo, useEffect, useRef } from 'react';\nimport {useBoard} from \"./useBoard\";\n\nconst Board = () => {\n\n    const [display, score, onKeyDown] = useBoard();\n    const eBoard = useRef();\n\n    useEffect(focusBoard, []);\n\n    function focusBoard() {\n        eBoard.current.focus();\n    }\n\n    return (\n        <div ref={eBoard} className={'t-board'} tabIndex={0} onKeyDown={ onKeyDown }>\n            <div>\n                <span className=\"t-score-label\">Score:</span>\n                <span className=\"t-score-label\">{score.toLocaleString()}</span>\n            </div>\n            {display.map( (row, index) => <Row row={row} key={index}/>)}\n        </div>\n    );\n};\n\nconst Row = memo( props => {\n    return (\n        <span className='t-row'>\n            {props.row.map( (cell, index) => <Cell cell={cell} key={index}/>)}\n        </span>\n    );\n});\n\nconst Cell = memo( props => {\n    const count = useRef(0);\n\n    count.current++;\n\n    const value = props.cell ? props.cell : 0;\n    return (\n        <span className={`t-cell t-cell-${value}`}></span>\n    );\n});\n\nexport default memo(Board);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from \"./tetris/board\";\n\nfunction Game() {\n    return (\n        <div className=\"t-parent\">\n            <Board/>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}